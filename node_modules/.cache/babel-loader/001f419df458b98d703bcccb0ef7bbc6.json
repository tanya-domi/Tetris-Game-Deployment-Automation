{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar cssUnit = {\n  cm: true,\n  mm: true,\n  in: true,\n  px: true,\n  pt: true,\n  pc: true,\n  em: true,\n  ex: true,\n  ch: true,\n  rem: true,\n  vw: true,\n  vh: true,\n  vmin: true,\n  vmax: true,\n  \"%\": true\n};\n/**\n * If size is a number, append px to the value as default unit.\n * If size is a string, validate against list of valid units.\n * If unit is valid, return size as is.\n * If unit is invalid, console warn issue, replace with px as the unit.\n *\n * @param {(number | string)} size\n * @return {LengthObject} LengthObject\n */\nfunction parseLengthAndUnit(size) {\n  if (typeof size === \"number\") {\n    return {\n      value: size,\n      unit: \"px\"\n    };\n  }\n  var value;\n  var valueString = size.match(/^[0-9.]*/).toString();\n  if (valueString.includes(\".\")) {\n    value = parseFloat(valueString);\n  } else {\n    value = parseInt(valueString, 10);\n  }\n  var unit = size.match(/[^0-9]*$/).toString();\n  if (cssUnit[unit]) {\n    return {\n      value: value,\n      unit: unit\n    };\n  }\n  console.warn(\"React Spinners: \" + size + \" is not a valid css value. Defaulting to \" + value + \"px.\");\n  return {\n    value: value,\n    unit: \"px\"\n  };\n}\nexports.parseLengthAndUnit = parseLengthAndUnit;\n/**\n * Take value as an input and return valid css value\n *\n * @param {(number | string)} value\n * @return {string} valid css value\n */\nfunction cssValue(value) {\n  var lengthWithunit = parseLengthAndUnit(value);\n  return \"\" + lengthWithunit.value + lengthWithunit.unit;\n}\nexports.cssValue = cssValue;","map":{"version":3,"names":["Object","defineProperty","exports","value","cssUnit","cm","mm","in","px","pt","pc","em","ex","ch","rem","vw","vh","vmin","vmax","parseLengthAndUnit","size","unit","valueString","match","toString","includes","parseFloat","parseInt","console","warn","cssValue","lengthWithunit"],"sources":["C:/Users/Win11 Pro/Desktop/NPM/Tetris-Game-Deployment-Automation/node_modules/react-spinners/helpers/unitConverter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cssUnit = {\n    cm: true,\n    mm: true,\n    in: true,\n    px: true,\n    pt: true,\n    pc: true,\n    em: true,\n    ex: true,\n    ch: true,\n    rem: true,\n    vw: true,\n    vh: true,\n    vmin: true,\n    vmax: true,\n    \"%\": true\n};\n/**\n * If size is a number, append px to the value as default unit.\n * If size is a string, validate against list of valid units.\n * If unit is valid, return size as is.\n * If unit is invalid, console warn issue, replace with px as the unit.\n *\n * @param {(number | string)} size\n * @return {LengthObject} LengthObject\n */\nfunction parseLengthAndUnit(size) {\n    if (typeof size === \"number\") {\n        return {\n            value: size,\n            unit: \"px\"\n        };\n    }\n    var value;\n    var valueString = size.match(/^[0-9.]*/).toString();\n    if (valueString.includes(\".\")) {\n        value = parseFloat(valueString);\n    }\n    else {\n        value = parseInt(valueString, 10);\n    }\n    var unit = size.match(/[^0-9]*$/).toString();\n    if (cssUnit[unit]) {\n        return {\n            value: value,\n            unit: unit\n        };\n    }\n    console.warn(\"React Spinners: \" + size + \" is not a valid css value. Defaulting to \" + value + \"px.\");\n    return {\n        value: value,\n        unit: \"px\"\n    };\n}\nexports.parseLengthAndUnit = parseLengthAndUnit;\n/**\n * Take value as an input and return valid css value\n *\n * @param {(number | string)} value\n * @return {string} valid css value\n */\nfunction cssValue(value) {\n    var lengthWithunit = parseLengthAndUnit(value);\n    return \"\" + lengthWithunit.value + lengthWithunit.unit;\n}\nexports.cssValue = cssValue;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,OAAO,GAAG;EACVC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,GAAG,EAAE,IAAI;EACTC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,IAAI;EACV,GAAG,EAAE;AACT,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EAC9B,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAO;MACHjB,KAAK,EAAEiB,IAAI;MACXC,IAAI,EAAE;IACV,CAAC;EACL;EACA,IAAIlB,KAAK;EACT,IAAImB,WAAW,GAAGF,IAAI,CAACG,KAAK,CAAC,UAAU,CAAC,CAACC,QAAQ,CAAC,CAAC;EACnD,IAAIF,WAAW,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3BtB,KAAK,GAAGuB,UAAU,CAACJ,WAAW,CAAC;EACnC,CAAC,MACI;IACDnB,KAAK,GAAGwB,QAAQ,CAACL,WAAW,EAAE,EAAE,CAAC;EACrC;EACA,IAAID,IAAI,GAAGD,IAAI,CAACG,KAAK,CAAC,UAAU,CAAC,CAACC,QAAQ,CAAC,CAAC;EAC5C,IAAIpB,OAAO,CAACiB,IAAI,CAAC,EAAE;IACf,OAAO;MACHlB,KAAK,EAAEA,KAAK;MACZkB,IAAI,EAAEA;IACV,CAAC;EACL;EACAO,OAAO,CAACC,IAAI,CAAC,kBAAkB,GAAGT,IAAI,GAAG,2CAA2C,GAAGjB,KAAK,GAAG,KAAK,CAAC;EACrG,OAAO;IACHA,KAAK,EAAEA,KAAK;IACZkB,IAAI,EAAE;EACV,CAAC;AACL;AACAnB,OAAO,CAACiB,kBAAkB,GAAGA,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAASW,QAAQA,CAAC3B,KAAK,EAAE;EACrB,IAAI4B,cAAc,GAAGZ,kBAAkB,CAAChB,KAAK,CAAC;EAC9C,OAAO,EAAE,GAAG4B,cAAc,CAAC5B,KAAK,GAAG4B,cAAc,CAACV,IAAI;AAC1D;AACAnB,OAAO,CAAC4B,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}