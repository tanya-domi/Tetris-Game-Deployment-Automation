name: "JFrog NPM Integration Tetris_Game"
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      
permissions:
  actions: read # for detecting the Github actions environment.
  id-token: write # for creating OIDC tokens for signing
  packages: write # for uploading attestions
  contents: read 

env:
  DOCKER_REPO: dominic-docker
  IMAGE_NAME: tetris-game
  JF_URL: ${{ secrets.JF_URL }}  
  DOCKER_BUILD_SUMMARY: false
  DOCKER_BUILD_RECORD_UPLOAD: false
  JFROG_CLI_LOG_LEVEL: DEBUG

jobs:
  sonar:
    name: code quality analysis
    runs-on: [Linux] 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
         args: >
          -Dsonar.projectBaseDir=src
          -Dsonar.projectKey=Tetris_Game
          -Dsonar.projectName=Tetris_Game
          -Dsonar.sources=.
          -Dsonar.exclusions=**/node_modules/**,**/disk/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
      # If you wish to fail your job when the Quality Gate parameters are not met, This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
           node-version: '16'
          
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Trivy file scan
        run: trivy fs . > trivyfs.txt

  publish-build:
    runs-on: [Linux]
    needs: [sonar]
 
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clean npmrc
        run: rm -f ~/.npmrc

      - name: Setup JFrog CLI OIDC
        uses:  jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:  
          JF_URL: ${{ vars.JF_URL }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: github-jfrog
          oidc-audience: my-aud
           
      - name: Setup Node npm
        uses: actions/setup-node@v4

      - name: Set CLI Config
        run: | 
          jf npm-config --global=true --repo-resolve=virtual-tetris-game --repo-deploy=virtual-tetris-game
          
      - name: Install Deps
        run: jf npm install
         
      - name: Publish
        run: jf npm publish
         
      - name: Publish Build info With JFrog CLI
        run: |
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish

  docker-push:
    runs-on: [Linux]
    needs: [sonar, publish-build]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Setup JFrog CLI with OIDC
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: github-jfrog
          oidc-audience: my-aud
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate Docker
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin ${{ secrets.DOCKER_REGISTRY }}
      
      # - name: Authenticate Docker
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ vars.JF_DOCKER_REGISTRY }}  
      #     username: ${{ steps.setup-cli.outputs.oidc-user }}
      #     password: ${{ steps.setup-cli.outputs.oidc-token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --allow-insecure-entitlement network.host

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          builder: default
          load: false
          network: host
          provenance: false

        
      - name: Add docker package to JFrog build info
        run: |
          echo "{\"image\": \"${{ secrets.DOCKER_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}\"}" > metadata.json
          jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json
           
      - name: Publish build info
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish "${{ env.IMAGE_NAME }}" $GITHUB_RUN_NUMBER

  Image-scan:
    runs-on: [Linux]
    needs: [docker-push]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JFrog CLI with OIDC
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: github-jfrog
          oidc-audience: my-aud

      - name: Authenticate Docker
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin ${{ secrets.DOCKER_REGISTRY }}

      - name: Scan Docker image with Trivy
        run: |
          IMAGE="${{ secrets.DOCKER_IMAGE }}"
          trivy image $IMAGE > trivyimage.txt || true

      - name: Check Trivy scan result
        run: |
          SCAN_RESULT=$(cat trivyimage.txt)
          TRIVY_EXIT_CODE=$?
          if [ $TRIVY_EXIT_CODE -eq 0 ]; then
             echo "Trivy scan completed successfully."
          else
             if echo "$SCAN_RESULT" | grep -iqE 'CRITICAL\|HIGH'; then
               echo "Trivy scan failed with critical or high vulnerabilities."
               exit 1
            else
              echo "Trivy scan passed with medium, low, or unknown vulnerabilities."
            fi
          fi

  deploy:
   needs: [sonar, docker-push, Image-scan]   
   runs-on: [Linux]

   steps:
     - name: Log in to JFrog Docker registry
       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin ${{ secrets.DOCKER_REGISTRY }}

     - name: Pull Docker image From JFrog
       run: docker pull ${{ secrets.DOCKER_REGISTRY }}/dominic-docker/tetris-game:latest
        
     - name: Image scan
       run: trivy image ${{ secrets.DOCKER_REGISTRY }}/dominic-docker/tetris-game:latest > trivyimagedeploy.txt  
  
    #  - name: Deploy and run Tetris to container
    #    run: docker run -d --name tetris-game1 -p 3000:3000 ${{ secrets.DOCKER_REGISTRY }}/dominic-docker/tetris-game:latest
    #  - name: Update kubeconfig
    #    run: aws eks --region eu-north-1 update-kubeconfig --name hr-dev-eks-cloud

    #  - name: Deploy to kubernetes
    #    run: kubectl apply -f deployment.yml

    #  - name: Echo Load Balancer
    #    run: |
    #       kubectl get svc | grep amazon | awk '{print $4}' | cat > arctiq.txt
    #       cat arctiq.txt

  Update-K8s:
    runs-on: [Linux]
    needs: [sonar, docker-push, Image-scan, deploy]  

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Update tags in K8s deployment manifest
        run: |
          sed -i "s|image: .*|image: ${{ secrets.DOCKER_USERNAME }}/dominic-docker/tetris-game:latest|" Kubernetes-manifest/deployment.yaml
                
      - name: commit and push changes
        run: |
          git config --global user.email "sheytanyadominic@gmail.com"
          git config --global user.name "Dominic-tanya"
          git add Kubernetes-manifest/deployment.yaml
          git commit -m "[CI]: Update deployment image tag"
          git push origin HEAD:main -f


  
